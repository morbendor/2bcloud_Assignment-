pipeline {

  agent any

  stages {

    stage('Checkout Source') {
      steps {
        git url:'https://github.com/morbendor/2bcloud_Assignment-.git', branch:'master'
      }
    }
    
      stage("Build image") {
            steps {
                script {
                    myapp = docker.build("morbendor/2bcloud_assignment:${env.BUILD_ID}")
                }
            }
        }
    
      stage("Push image") {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                            myapp.push("latest")
                            myapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }

    
    stage('Deploy App') {
      steps {
        script {
          kubernetesDeploy(configs: "k8s/mor_assigmnet.yml", kubeconfigId: "mykubeconfig")
        }
      }
    }


    stage('Test APP ') {
      options {
      timeout(time: 60, unit: 'MINUTES')
          }
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'morbd_machine', transfers: [sshTransfer(cleanRemote: false, excludes: "", execCommand: '''kube_ip=$(minikube service mor-assigmnet-svc --url);if [ -z "$kube_ip" ]; then echo "\$kube_ip is empty"; exit 1; else echo "\$kube_ip is NOT empty"; curl $kube_ip; fi''', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                
            }
        }

  }

}